name: 🚀 Daily Strategy Optimization

on:
  workflow_dispatch:  # Manual triggering only
    inputs:
      optimization_type:
        description: 'Optimization Type'
        required: true
        default: 'standard'
        type: choice
        options:
        - standard
        - aggressive
        - conservative
      test_configurations:
        description: 'Number of configurations to test'
        required: false
        default: '100'
        type: string

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  optimize-strategies:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      matrix:
        optimization_focus: [
          "ultimate_50pts",
          "market_structure",
          "multi_strategy"
        ]
      fail-fast: false

    steps:
    - name: 🔄 Checkout Repository
      uses: actions/checkout@v4

    - name: 🐍 Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas numpy scipy pydantic fastapi uvicorn
        pip install matplotlib seaborn  # For potential visualizations

    - name: 🔍 Validate Sample Data
      run: |
        echo "🔍 Checking sample data availability..."
        ls -la sample_data/
        python3 validate_sample_data.py
        echo "✅ Sample data validation complete"

    - name: 🚀 Run Strategy Optimization
      id: optimization
      run: |
        echo "🚀 Starting optimization: ${{ matrix.optimization_focus }}"

        # Set optimization parameters based on input
        CONFIGS="${{ github.event.inputs.test_configurations || '100' }}"
        OPT_TYPE="${{ github.event.inputs.optimization_type || 'standard' }}"

        case "${{ matrix.optimization_focus }}" in
          "ultimate_50pts")
            echo "Running Ultimate 50+ Points Optimization..."
            python3 ultimate_optimizer_50pts.py > optimization_results_${{ matrix.optimization_focus }}.log 2>&1
            ;;
          "market_structure")
            echo "Running Market Structure Optimization..."
            python3 advanced_market_structure_optimizer.py > optimization_results_${{ matrix.optimization_focus }}.log 2>&1
            ;;
          "multi_strategy")
            echo "Running Multi-Strategy Portfolio Optimization..."
            python3 optimized_multi_strategy_system.py > optimization_results_${{ matrix.optimization_focus }}.log 2>&1
            ;;
        esac

        echo "✅ Optimization complete for ${{ matrix.optimization_focus }}"

    - name: 📊 Process Results
      run: |
        echo "📊 Processing optimization results..."

        # Check for generated files
        ls -la *.json *.py *.log 2>/dev/null || echo "No new files generated"

        # Extract key metrics if available
        if [ -f "ultimate_optimization_results.json" ]; then
          echo "📈 Found optimization results file"
          python3 -c "
import json
import sys
try:
    with open('ultimate_optimization_results.json', 'r') as f:
        results = json.load(f)

    if 'top_configurations' in results:
        print('🏆 TOP RESULTS:')
        for i, config in enumerate(results['top_configurations'][:3]):
            print(f'  {i+1}. {config.get(\"name\", \"Unknown\")}: {config.get(\"avg_daily_points\", 0):.2f} pts/day')

    if 'best_configuration' in results:
        best = results['best_configuration']
        print(f'🎯 BEST: {best.get(\"avg_daily_points\", 0):.2f} pts/day (Target: 50+)')

except Exception as e:
    print(f'⚠️ Could not parse results: {e}')
"
        fi

    - name: 💾 Archive Results
      uses: actions/upload-artifact@v3
      with:
        name: optimization-results-${{ matrix.optimization_focus }}-${{ github.run_number }}
        path: |
          *.json
          *.log
          optimized_*.py
        retention-days: 30

    - name: 📝 Commit Results
      if: success()
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action - Daily Optimization"

        # Add any new results files
        git add -A

        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "🚀 Daily Optimization Results - ${{ matrix.optimization_focus }}

Results from automated cloud optimization:
- Focus: ${{ matrix.optimization_focus }}
- Configurations tested: ${{ github.event.inputs.test_configurations || '100' }}
- Run ID: ${{ github.run_number }}
- Timestamp: $(date -u)

🤖 Generated by GitHub Actions
Co-Authored-By: Claude Optimization Agent <noreply@anthropic.com>"

          git push
        fi

    - name: 📋 Update GitHub Issue
      if: success()
      uses: actions/github-script@v6
      with:
        script: |
          // Find or create optimization tracking issue
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'optimization-tracking',
            state: 'open'
          });

          let issueNumber;
          if (issues.length === 0) {
            // Create tracking issue
            const { data: newIssue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '📊 Daily Optimization Tracking',
              body: '🤖 **Automated Optimization Results Tracking**\n\nThis issue tracks daily optimization progress.',
              labels: ['optimization-tracking', 'automated']
            });
            issueNumber = newIssue.number;
          } else {
            issueNumber = issues[0].number;
          }

          // Add comment with results
          const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;

          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issueNumber,
            body: `## 🚀 Daily Optimization Complete - ${{ matrix.optimization_focus }}

**Run Details:**
- **Focus**: ${{ matrix.optimization_focus }}
- **Configurations**: ${{ github.event.inputs.test_configurations || '100' }}
- **Status**: ✅ Success
- **Run ID**: ${{ github.run_number }}
- **Timestamp**: ${new Date().toISOString()}

**Results**: Check the [workflow run](${runUrl}) for detailed results and artifacts.

---
*🤖 Automated by GitHub Actions Cloud Agent*`
          });

  workflow-summary:
    needs: optimize-strategies
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: 📊 Workflow Summary
      run: |
        echo "## 🚀 Daily Optimization Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Date**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "**Run ID**: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Matrix Jobs Status:" >> $GITHUB_STEP_SUMMARY
        echo "- Ultimate 50+ Points: ${{ needs.optimize-strategies.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Market Structure: ${{ needs.optimize-strategies.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Multi-Strategy: ${{ needs.optimize-strategies.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🎯 **Target**: 50+ points/day | **Current Best**: 43.12 pts/day" >> $GITHUB_STEP_SUMMARY